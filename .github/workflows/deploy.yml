name: Deploy to Lambda

on:
  push:
    branches:
      - main    # or your default branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        run: npm ci --production

      - name: Install dependencies
        run: npm ci --production

      - name: Zip full repo (exclude dev files)
        run: |
          # zip everything in the repo but exclude VCS, CI, and local env / secret files
          zip -r function.zip . \
            -x '.git/*' \
            -x '.github/*' \
            -x '*.env*' \
            -x 'tests/*' \
            -x 'docs/*' \
            -x '*.log' \
            -x '*.DS_Store' \
            -x 'function.zip' \
            -x '*.pem' \
            -x '*.key'
          echo "=== Zip contents ==="
          unzip -l function.zip | sed -n '1,200p'


      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1   # change if your Lambda is in another region

      - name: Update Lambda function code
        env:
          FUNCTION_NAME: express-api
        run: |
          aws lambda update-function-code \
            --function-name "$FUNCTION_NAME" \
            --zip-file fileb://function.zip \
            --publish

# install jq so we can merge env vars
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
      
      # wait for Lambda to finish the code update (longer polling + checks)
      - name: Wait for Lambda to become Active and Successful
        env:
          FUNCTION_NAME: express-api
        run: |
          max_attempts=20
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            cfg_json=$(aws lambda get-function-configuration --function-name "$FUNCTION_NAME" --output json)
            state=$(echo "$cfg_json" | jq -r .State)
            last_status=$(echo "$cfg_json" | jq -r .LastUpdateStatus)
      
            echo "Attempt $attempt: State=$state, LastUpdateStatus=$last_status"
      
            if [ "$state" = "Active" ] && [ "$last_status" = "Successful" ]; then
              echo "Lambda is ready."
              break
            fi
      
            if [ "$last_status" = "Failed" ]; then
              echo "Lambda update failed. Dumping configuration for debugging:"
              echo "$cfg_json"
              exit 1
            fi
      
            # exponential backoff: 5,10,15,... seconds
            sleep_seconds=$((attempt * 5))
            echo "Sleeping $sleep_seconds seconds before retry..."
            sleep $sleep_seconds
      
            attempt=$((attempt + 1))
          done
      
          if [ $attempt -gt $max_attempts ]; then
            echo "Timed out waiting for Lambda to become ready."
            exit 1
          fi
      
      # merge existing env vars with the MONGODB_URI secret so we don't clobber others
      - name: Merge & update Lambda environment variables
        env:
          FUNCTION_NAME: express-api
        run: |
          # fetch current env (may be null)
          cfg=$(aws lambda get-function-configuration --function-name "$FUNCTION_NAME" --output json)
      
          # extract current variables (or empty object)
          current_vars=$(echo "$cfg" | jq -r '.Environment.Variables // {}')
      
          # build new vars object by merging existing with the new ones; GH secrets are expanded by Actions
          new_vars=$(echo "$current_vars" | jq --arg mongo "${{ secrets.MONGODB_URI }}" --arg db "prod" '. + {MONGODB_URI: $mongo, MONGODB_DB: $db }')
      
          # update config using the merged variables (converted to KEY=VALUE,KEY2=VALUE2 form)
          # convert JSON object to the AWS CLI inline format
          kv_string=$(echo "$new_vars" | jq -r 'to_entries|map("\(.key)=\(.value|tostring)")|join(",")')
      
          aws lambda update-function-configuration \
            --function-name "$FUNCTION_NAME" \
            --environment "Variables={$kv_string}"
      